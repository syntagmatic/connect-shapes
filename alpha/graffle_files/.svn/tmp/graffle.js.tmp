<script src="http://www.google.com/jsapi"></script>

google.load("mootools", "1.2.4");
// $chk

// Quirksmode functions

function findpos(e) {
	var posx = 0;
	var posy = 0;
	if (!e) var e = window.event;
	if (e.pageX || e.pageY) 	{
		posx = e.pageX;
		posy = e.pageY;
	}
	else if (e.clientX || e.clientY) 	{
		posx = e.clientX + document.body.scrollLeft
			+ document.documentElement.scrollLeft;
		posy = e.clientY + document.body.scrollTop
			+ document.documentElement.scrollTop;
	}
    alert(posx,posy);
}





Raphael.fn.connection = function (obj1, obj2, line, bg) {
    if (obj1.line && obj1.from && obj1.to) {
        line = obj1;
        obj1 = line.from;
        obj2 = line.to;
    }
    var bb1 = obj1.getBBox();
    var bb2 = obj2.getBBox();
    var p = [{x: bb1.x + bb1.width / 2, y: bb1.y - 1},
        {x: bb1.x + bb1.width / 2, y: bb1.y + bb1.height + 1},
        {x: bb1.x - 1, y: bb1.y + bb1.height / 2},
        {x: bb1.x + bb1.width + 1, y: bb1.y + bb1.height / 2},
        {x: bb2.x + bb2.width / 2, y: bb2.y - 1},
        {x: bb2.x + bb2.width / 2, y: bb2.y + bb2.height + 1},
        {x: bb2.x - 1, y: bb2.y + bb2.height / 2},
        {x: bb2.x + bb2.width + 1, y: bb2.y + bb2.height / 2}];
    var d = {}, dis = [];
    for (var i = 0; i < 4; i++) {
        for (var j = 4; j < 8; j++) {
            var dx = Math.abs(p[i].x - p[j].x),
                dy = Math.abs(p[i].y - p[j].y);
            if ((i == j - 4) || (((i != 3 && j != 6) || p[i].x < p[j].x) && ((i != 2 && j != 7) || p[i].x > p[j].x) && ((i != 0 && j != 5) || p[i].y > p[j].y) && ((i != 1 && j != 4) || p[i].y < p[j].y))) {
                dis.push(dx + dy);
                d[dis[dis.length - 1]] = [i, j];
            }
        }
    }
    if (dis.length == 0) {
        var res = [0, 4];
    } else {
        var res = d[Math.min.apply(Math, dis)];
    }
    var x1 = p[res[0]].x,
        y1 = p[res[0]].y,
        x4 = p[res[1]].x,
        y4 = p[res[1]].y,
        dx = Math.max(Math.abs(x1 - x4) /2 , 10),
        dy = Math.max(Math.abs(y1 - y4) /2 , 10),
        x2 = [x1, x1, x1 - dx, x1 + dx][res[0]].toFixed(3),
        y2 = [y1 - dy, y1 + dy, y1, y1][res[0]].toFixed(3),
        x3 = [0, 0, 0, 0, x4, x4, x4 - dx, x4 + dx][res[1]].toFixed(3),
        y3 = [0, 0, 0, 0, y1 + dy, y1 - dy, y4, y4][res[1]].toFixed(3);
    var path = ["M", x1.toFixed(3), y1.toFixed(3), "C", x2, y2, x3, y3, x4.toFixed(3), y4.toFixed(3)].join(",");
    if (line && line.line) {
        line.bg && line.bg.attr({path: path});
        line.line.attr({path: path});
    } else {
        var color = typeof line == "string" ? line : "#000";
        return {
            bg: bg && bg.split && this.path(path).attr({stroke: bg.split("|")[0], fill: "none", "stroke-width": bg.split("|")[1] || 3}),
            line: this.path(path).attr({stroke: color, fill: "none", "stroke-width": 2 , "stroke-dasharray": "."}),
            from: obj1,
            to: obj2
        };
    }
};






var el;
window.onload = function () {
    var isDrag = false;
    var clicked = false;
    var dragger = function (e) {
        this.dx = e.clientX;
        this.dy = e.clientY;
        isDrag = this;
        this.animate({"fill-opacity": 1}, 500);
        e.preventDefault && e.preventDefault();
    };
  
    var connMatrix = [];
    var newConn = function (first, second, color) {
	if (connMatrix[first][second] == undefined) {
		connID = shapes.length;
    		shapes[connID] = connections.push(r.connection(shapes[first], shapes[second], color ));
		connMatrix[first][second] = connections.length - 1;
		connMatrix[second][first] = connections.length - 1;
		connMatrix[connID]=[];
	} else {
		// thisConn = connMatrix[first][second];
		// r.connection(connections[i]);
	}
    }
    

	isSelected = false;
    var selectShape = function (selected) {
	isSelected = selected;
	shapes[selected].animate({"fill-opacity":0.4},500);
    }
    var deselectShape = function (selected) {
	isSelected =false;
	shapes[selected].animate({"fill-opacity":0},140);
    }

	var scaleTime = false;
    var clicker = function () {
	if ($chk(isSelected) && isSelected !== this.id) {
		// Create new connection
		newConn(isSelected,this.id,'#a33');
        	deselectShape(isSelected);
        	selectShape(this.id);
		this.toFront();
	} else if (isSelected === this.id) {
		// Remove shape if second click
		deselectShape(this.id);
	} else {
		// Select shape if first click
		selectShape(this.id);
		this.toFront();
	}
    };
    

    var newShape = function (i) {
        var color = Raphael.getColor();
        shapes[i].attr({fill: color, stroke: color, "fill-opacity": 0, "stroke-width": 2});
        shapes[i].node.style.cursor = "move";
        shapes[i].mousedown(dragger);
        shapes[i].click(clicker);
	    connMatrix[i]=[];
    }


    var r = Raphael("holder", 960, 640);
    var connections = [],
        shapes = [  r.ellipse(420, 550, 70, 70),
                    r.ellipse(220, 355, 20, 22),
                    r.rect(435, 300, 25, 25,3)
                ];
    for (var i = 0, ii = shapes.length; i < ii; i++) {
	newShape(i);
    }
    newConn(1,2,'#6c6');
    newConn(0,1,'#6c6');


    document.onmousedown = function (e) {
        e = e || window.event;
	if (!(isDrag)) {
		if (isSelected == false) {
			shapes.push(r.rect(e.clientX, e.clientY, 50, 30,3));
			newShape(shapes.length-1);
		} else {
			deselectShape(isSelected);
		}
	}
    };
    document.onmousemove = function (e) {
        e = e || window.event;
        if (isDrag) {
            isDrag.translate(e.clientX - isDrag.dx, e.clientY - isDrag.dy);
            for (var i = connections.length; i--;) {
                r.connection(connections[i]);
            }
            r.safari();
            isDrag.dx = e.clientX;
            isDrag.dy = e.clientY;
        }
    };
    document.onmouseup = function () {
        isDrag && isDrag.animate({"fill-opacity": 0}, 500);
        isDrag = false;
    };
};

    function onkeypress(e) {
	    var code;
	    if (!e) var e = window.event;
	    if (e.keyCode) code = e.keyCode;
	    else if (e.which) code = e.which;
	    var character = String.fromCharCode(code);
	    console.log(character);
        console.log(r);
        if ($chk(isSelected) && character == 'f') {
            r.shapes[isSelected].scale(2,2);
        }
    }
